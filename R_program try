#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
install.packages("dplyr") #(This package will make data manipulation easier)
install.packages("odbc") #(This is used to connect the databae )
install.packages("scales")
install.packages("R6") #(This is used for OOPS in R)
install.packages("readr") #(This is uesd to load the excle sheet)
install.packages("stringr")#(This is used to manipulat and remove the , and lower and upper case )
install.packages("ggplot2")
library(ggplot2)
library(stringr)
library(readr)
library(R6)
library(scales)
library(dplyr)
library(odbc)



str_length()
str_to_lower()
str_to_upper()
str_remove()
str_c()#this is used to convert multiple string into single string

tables<- data.frame( Name= c("vino,th","venk,atsh","mohan,raj","thinesh","visvak,survash","siva,sankar","kishna,kumar"),
                      Age = c(28,28,27,29,9,23,20),
                      Dis=c("Analist","Civil eng","Procurement","Electrical","playing","Accountant","student")
)
tableslist <- list(Name= c("vino","venk","mohan","thinesh","visvak","siva","kishna"),
                   Age = c(28,28,27,29,9,23,20),
                   Dis=c("Analist","Civil eng","Procurement","Electrical","playing","Accountant","student"))

tablesmat <- matrix(tables)
#######################################################################
# Basic calculation

ggplot(tables,aes(Age,Name,size=4,color="red"))+geom_text(label=rownames(tables))
ggplot(tables,aes(Age,Name,size=4,color="fam",fill="black"))+geom_point()
ggplot(tables,aes(Age,Name,size=4,color="fam"))+geom_jitter()

ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(alpha = 0.5)

ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +geom_jitter(alpha = 0.5,width=0.1)

ggplot(mtcars,aes(mpg,size=0.1)) +geom_histogram()
ggplot(mtcars, aes(mpg,fill="fam")) +  geom_histogram(binwidth = 1, position = "dodge")


######### GGPLOT in Youtube
head(iris)
ggplot(iris)
ggplot(iris,aes(Sepal.Length,Sepal.Width))
ggplot(iris,aes(Sepal.Length,Sepal.Width))+geom_point(color='violet')
ggplot(iris,aes(Sepal.Length,Sepal.Width,color=Species))+geom_point()
ggplot(iris,aes(Sepal.Length,Sepal.Width,color=Species,size=1))+geom_point() #it will mention the size on side while we give it on aes
ggplot(iris,aes(Sepal.Length,Sepal.Width,color=Species))+geom_point(size=2)#it will not mention the size on side while we give it on geom
ggplot(iris,aes(Sepal.Length,Sepal.Width,color=Species,size=Species))+geom_point()
ggplot(iris,aes(Sepal.Length,Sepal.Width,shape=Species,color=Species))+geom_point()
ggplot(iris,aes(Sepal.Length,Sepal.Width,color=Species))+geom_point()+scale_color_brewer() #scale is use to define the difference from min value to max value
ggplot(iris,aes(Sepal.Length,Sepal.Width))+geom_point(aes(color=Species))+scale_color_brewer(palette = 'set') #scale is use to define the difference from min to max
ggplot(iris,aes(Sepal.Length,Sepal.Width))+geom_point(aes(color=Species)) + facet_wrap(vars(Species),nrow = 2) #facet_wrap is use to seperate single chart to multiple chart
ggplot(iris,aes(Sepal.Length,Sepal.Width))+geom_point(aes(color=Species)) + facet_wrap(vars(Species),nrow = 2) +theme_dark() #this is use to add a theam for background


















grepl("o",tables$Name)
gsub("o","g",tables$Name,)

class(tableslist)

lapply(tableslist, class)
lapply(tableslist,nchar)



Name= c("vino","venk","mohan","thinesh","visvak","siva","kishna")
lapply(Name,nchar)
nchar(Name)

str_remove(tables$Name,",")
str_remove(tables$Name,",")
class(tables)
typeof(tables)
summary(tables)
mean(tables$Age)
median(tables$Age)

lapply(tables, class)
length(tables$Age)
length(tableslist$Age)
select(tables,Name)

length(tables)
x<- c("user","vino")
length(x)


#DPLYR package

select(tables,Name)
arrange(tables,Age)
mutate(tables,sal=c(10000,12000,14000,16000,8000,22000,23000))
rename(tables,Names=Name)
select(tables,Name,Age)%>% arrange(Age)

getwd()
write.csv(tables,"Tables.csv",row.names = FALSE)
read.csv("Tables.csv")
read_csv("Tables.csv")
? read_excel()
Tables
Book1 <- read_excel("~/Book1.xlsx",sheet = 2)
select(Book1,Id)
mu<-mutate(Book1,Non=c(1:75))
arrange(mu,WellboreContainerTypeId)
rename(mu,No=Non)
#########################################################

#Relation operater
class(tables) %in% class(tableslist)

length(tables) == length(tables)

length(tables$Name) > length(tableslist$Name)

length(tables$Name[1])

############################################################

# While loop
#break will stop the loop when the condition is satisify
rpm<- 20
while (rpm>10) {
print("slow down!!")
  break
}
 # next will skip the line
while (rpm>10) {
  print("slow down!!")
  next
}

#################################################
#For loop

for (a in tableslist) {
  print(class(a))

}

for (i in 1:length(tables$Age)) {
  print(i)

}

a<-c(1,2,3,4,5,6)
for (i in 1: length(a)) {
  print(i)

}


for (j in tables) {
  print(j)

}

for (i in 1: length(tables)) {
  print(i)

}


for (i in tablesmat) {
  print(i)

}

for (i in 1: length(tablesmat$age)) {
  print(i)

}

for (i in 1: nrow(tablesmat)) {
  print(i)

}


################################################

#Function
a<-2
b<-2
vino <- function(){
  print("Hello")
}
vino()

vino <- function(){
  print(a*b)
}
vino()

vino <- function(name){
  print(paste0(name, " ", "My friend"))
}

vino("vinoth")

a1 <- function(a,b){
  print(a+b)
  print(a-b)
  print(a*b)
  print(a==b)
}
a1(2,2)


a2 <- function(a,b=3){
  print(a+b)
  print(a-b)
  print(a*b)
  print(a==b)
}
a2(2)


a <- function(a,b){
  print(a+b)
  print(a-b)
  print(a*b)
  print(a==b)
}
a1(2)


n<-c()
for (c in 1:length(Name)) {
  n[c]<-nchar(Name[c])

}
n


data<-mtcars

mpg <- function(mpg){
  if( mpg > 30){
    return("High speed")
  }else if(mpg > 20){
    return("Medium Fpeed")
  } else {print("Too SLOW")}
}

lapply(data$mpg, mpg)




re <- function(x){
  return(x)
}
re(3)
re("vino")
re(T)
#######    Dout #######3
re1 <- function(x=1){
  if(x>0){
  result<- x + re1(x-1)
  print(result)
}}
re1(2,3)




#ODBC Connection

con <- dbConnect(odbc::odbc(),"PRTS")

wc<-dbGetQuery(conn = con,"select * from wellbore ")

wc1<-dbGetQuery(conn = con,"select * from WBContainer_Curve_Mapping_View where Id = 'B5A65AB3-E197-493F-B519-60FE50B389F3' ")

wc2<-dbGetQuery(conn = con,"select * from witsml ")

is.na(wc1)

dbListTables(con)
copy_to(con,mu)

is.numeric(tables$Name)

?db_list_tables
wc$watchjobconfig
mean(wc$uid)
class(wc$uid)
is.na(wc$parentWellbore)

wc$uidWell


#######################################
#R6 Package

# Public method can access using self$...
# Private method can access uing private$...
# public Parent class can be access usin super$,,




vino <- R6::R6Class("vino",
           public=
             list(Name = "",
                  Id="",
                  Age="",
                  initialize = function(Name="",Id="",Age=""){
                    Name<-Name
                    Id<-Id
                    Age<-Age
                  }

      )
           )
vino$new("vinoth","001","29")
####################################3

Addition <-R6:: R6Class(
  "Addition",
  public = list(
    sum=0,
    add = function(x=1){
      self$sum <- self$sum + x
      return(self)
    }
  )

)
Additio
 Addition$new()
x<- Addition$new()
x$add(10)$add(10)$sum
x$sum
x$add()
a<-x$add()
x$sum#it will return 0
x$add(2)
x$sum

Preson <-R6::R6Class(
  "Person",
  public = list(
    Name="null",
    age=NA,
    initialize = function(Name,age){
      self$Name<-Name
      self$age<-age
      add()
    },
    add = function(){
  self$age  <-  1+3
    }
  )
)

y<-Preson$new("vino",30)
#####################
#https://youtu.be/NXmlqK2LxWw?feature=shared
BanckAccount <- R6::R6Class(
  "BanckAccount",
  public = list(
    balance = 0,
    deposite = function(x){
      self$balance <- self$balance + x
      return(self)
    },
    withdraw = function(x){

      self$balance <- self$balance - x
      return(self)

    }
  )
)

x<- BanckAccount$new()

x$deposite(30)
x$deposite(25000)
x$deposite(5)
x$deposite(5)
x$deposite(10000)
x$withdraw(10000)
BanckAccount$class
BanckAccount$classname
x<-BanckAccount$new()
y<-x$deposite(10)
y
x$deposite(100)$withdraw(50)
x$balance
######################################################
#Initialize
BanckAccount <- R6::R6Class(
  "BanckAccount",
  public = list(
    pwd =NULL ,
    balance = 0,
    initialize = function(){
      print("Hello World")
    },
    deposite = function(x){
      self$balance <- self$balance + x
      return(self)
    },
    withdraw = function(x){

      self$balance <- self$balance - x
      return(self)

    }
  )
)
x<- BanckAccount$new()
##########################################################

BanckAccount <- R6::R6Class(
  "BanckAccount",
  public = list(
    pwd =NULL ,
    balance = 0,
    initialize = function(pwd){
      self$pwd <- pwd
    },
    print = function(...){
      cat("Balance",scales::dollar(self$balance))
      return(self)
    },

    deposite = function(x,pwd){
      stopifnot(pwd == self$pwd)
      self$balance <- self$balance + x
      return(self)
    },
    withdraw = function(x,pwd){
      stopifnot(pwd == self$pwd)
      self$balance <- self$balance - x
      return(self)

    }
  )
)


#################################################################################
Measurement <-R6:: R6Class(
  "Measurement",
  public= list(

    unitconvention =  function(){
      if(from=="M" && to=="F"){
        print(paste(num*3.28," Feet"))
      } else if(from=="F" && to=="M"){
        print(paste(num/3.28,"Meter"))
      }else{print("The value entered is not correct please make sure")}

    }
  )
)
#############################################################################


x<-BanckAccount$new("vino")
x$deposite(100,"vino")
x$balance
x$withdraw(50,"vino")
x$balance



Math <- R6::R6Class(
  "Math",
  public = list(
    add=0,
    sub=0,
    mul=0,
    initialize = function(){
      print("Welcom to math")
    } ,
    Addition = function(a,b){
      self$add <- a + b
    },
    Subraction = function(a,b){
      self$sub <- a - b
    },
    Multplication = function(a,b){
      self$mul <- a * b
    }
  )
)

x<- Math$new()
x$Addition(2,2)
x$Subraction(5,2)
x$Multplication(2,5)

x$add
x$sub
x$mul






x<-Math$new()
Math$new()
x$Addition(2,2)
x$add

#################################################################
#Inheitance and Over ride
ParentClass <- R6::R6Class(
  "ParentClass",
  public = list(
    Pname = function(){
      message("Veeriya","Malliga")
    }
  )
)

ChildClass <- R6::R6Class(
  "ChildClass",
  inherit = ParentClass,
  public = list(
    cname =function(){
      message("Vino","krishna")
    },
    csname =function(){
      message("Siva" , "Kishna")
    self$cname()
    super$Pname()
      }

  )
)

ci <- ChildClass$new()
ci$cname()

ci$csname()

ci$Pname()

P_Propeties <- R6::R6Class(
  "P_Propeties",
  public = list(
    pop = function(){

    }
  )

)

#Dr vijaya lakshimi 14\25 1st street naga arjuna nagar ranga raja puram kodambakkam
#flat name sai niranthara



Class <- R6::R6Class(
  "Class",
  public = list(
    a1 = function(){
      message(a+b)
    }
  )
)
Class$new()
Class$a1


v1<- c(1,2,3,4,5)
print(v1)
v2<- c(6:10)
print(v2)
vec <- v1+v2
x <- c(1, 2, 3, 4, 5)

# Find the length of the vector
length(x)
# Create a character vector
y <- c("apple", "banana", "cherry")

# Find the length of the vector
length(y)
# Create a logical vector
z <- c(TRUE, FALSE, TRUE, TRUE)

# Find the length of the vector
length(z)
print(vec)
sum(vec)
prod(vec)
mean(vec)
us<-readline(prompt = "Pleace any thing : ")
us2<-(as.character(us))
print(us2)

var5 = readline(prompt = "Enter your name : ")
print(var5)
# R program to illustrate
# taking input from the user

# taking input using scan()
x = scan()
# print the inputted values
print(x)

# R program to illustrate
# taking input from the user

# double input using scan()
d = scan(what = double())

# string input using 'scan()'
s = scan(what = " ")

# character input using 'scan()'
c = scan(what = character())

# print the inputted values
print(d) # double
print(s) # string
print(c) # character
sd(2:5)
min(x)
max(x)
#Write an R Program for “Hello Geeks”.Write an R Program to Add Two Vectors
v1<- c(1,2,3,4,5)
v2<- c(6:10)
vec <- v1+v2
print(vec)
#Find the Sum, Mean and Product of the Vector in R Programming
sum(vec)
prod(vec)
mean(vec)
#Create an R Program to Take Input From the User

us<-readline(prompt = "Pleace enter any thing : ")
us2<-(as.character(us))
print(us2)
#How to Generate Random Numbers from Standard Distributions in R

sd(2:5)

#Create an R Program to Find the Minimum and Maximum
min(x)
max(x)

#R Program to Sort a Vector
# Creating a vector
z <- c(7, 4, 3, 9, 1.2, -4, -5, -8, 6, NA)

# Calling sort() function
sort(z)

sort(x)

#How to Find the Factorial of a Number


factorial(3)

# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
# check is the number is negative or possitive
if(num < 0) {
  print("Not possible for negative numbers")
} else if(num == 0) {
  print("The factorial of 0 is 1")
} else {
  for(i in 1:num) {
    factorial = factorial * i
  }
  print(paste("The factorial of", num ,"is",factorial))
}

#How to create R Multiplication Table


for ( i in 1:10){
  print(paste0("2 * ", i, "=" , (2*i)))

}

matrix(1:3,nrow = 2,ncol = 3)

########################################################################3

order_details<- c(10,20,30,NA,50,60)
names(order_details)<-c("Mon","Tue","Wed","Thu","Fri","Sat")
print((order_details))
neworder<-c(5,10)
upddateorder <- order_details+neworder
#LEngth of vect
l<-length(order_details)
print(order_details[(l-1):1])
print(order_details[(l-1):2])
#Extat valu below 30

order_details<30
order_details[order_details<30]
#TO omit na
na.omit(order_details)
na.omit(order_details<30)
#Divisible by 3
order_details%%3==0
na.omit(order_details%%3==0)

#TO remove na
sum(order_details)#It show the na valu only
sum(order_details,na.rm = T)
mean(order_details,na.rm = T)
max(order_details,na.rm = T)
min(order_details,na.rm = T)
sd(order_details,na.rm = T)
v<-20:30
v
#Function using matrix
matrix(v,2,3)
name <- c("Vino","Raja","Siva","Krishna")
mark <- c(1:9)
m<-c(name,mark)
m
mat<-matrix(m,nrow = 5,ncol = 3,byrow = T)
mat1<-matrix(30:49,nrow = 4,ncol = 5,byrow = T)
sub<-c("Tamil","Eng","Math","Science","Soc")
colnames(mat1)=sub
rownames(mat1)=name
mat1
rownames((mat1))
colnames(mat1)
dim(mat1)
rowsum(mat1)
rowMeans(mat1)
max(mat1)
#######################################################################
name <- c("Vino","Raja","Siva","Krishna")
mark <- c(1:4)
sub<-c("Tamil","Eng","Math","Science")

df<-data.frame(name,sub,mark)
summary(df)
str(df)
df[1,3]
df["name"]

df$name
subset(df,subset = mark>2)

author<- data.frame( surname= c("kalki","Vyasa","George","Rowling"),
                     nationality=c("India","India","US","UK")

)
books<- data.frame( name=c("kalki","Vyasa","George","Rowling"),
                    title=c("Ponnin selvan","Mahabaratham","GOT","Harry porter")

)


mer<-merge(author,books,by.x = "surname",by.y = "name")
############################################################################
#Data viz

plot(ChickWeight)
library(MASS)
plot(UScereal$sugars,UScereal$calories)
title("plot UScereal$sugars,UScereal$calories")
x<- c(20,50,30,10)
mar<-c("Vino","krish","Moor","Siva")
pie(x,mar)
pie(x,mar,main = "Mark distribute",col = rainbow(x))
install.packages("plotrix")
library(plotrix)
pie3D(x,labels =  mar, main = "Mark",explode = 0.1)


################################################################################################
#Function
squre <- function(a){
  for (i in 1:a ) {
    b<- i^2
    print(b)
  }
}
squre(6)

nmae <- function(name){
  print(paste0("Hellao :", name))
}
nmae("Vino")

add<-function(num1,num2){
  print(num1+num2)
}
add(10,20)
add(c(2,3,4),5)


amt<-function(x){
  print(x+x*20/100)
}
amt(100)


bonus_get <- function(sal,exp) {
  if(exp>5){
    bonus_per =10
  }
  else {bonus_per = 5}

  bonus = sal*(bonus_per/100)
  return(bonus)

}
bonus_get(20000,2)

x <- c(TRUE, FALSE,0, 1, 4) !x
40-70+10/5
v <- c(2, 4, "India", "YouTube", 10.5)
class(v)
v <- c(3, 4, 5, 6)
l <- c("e", "v", "j")
r <- c(v, l)
print(r)
x <- 0:3
as.logical(x)
list_1 <- list(c("India", "US"), c(10000, 20000))
names(list_1) <- c("Countries", "Employees")
print(list_1$India)
matrix(2:10, nrow = 4, byrow = F)
l <- matrix(LETTERS[5:10], ncol=2)
l
player <- "I play football"
play <- function(player){ print(player)
  player <- 'I would like to play basketball'
  print(player)
  }
print(player)
play(player)


discount<-function(item_cost,units) {
  if(units>55) {
    discount_per=20 }
  else{
    discount_per=14 }
  total_discount = item_cost*(discount_per/100)
  return(total_discount) }
discount(50000,40)

for (i in 2:8) {
  if (!i %% 3){
    next }
  print(i) }


wins <- 0
playoffs <- c()
while (wins <= 10){
  if (wins < 5){
    print("Out from playoffs")
    playoffs <- c(playoffs, "Out from playoffs") }
  else { print ("In playoffs")
    playoffs <- c(playoffs, "In playoffs")
    break }
  wins <- wins + 1 }
Emp_df <- data.frame(name = c("John", "Carry", "Russel", "Finch"),
                     age = c(45, 34, 28, 50),
                     weight = c(79, 75, 68, 80))
Emp_df.name<- arrange(Emp_df, weight)
print(Emp_df.name)
 filter(Emp_df,age < 35 | weight <= 79)
#################################################
#Add Rows in DF
a<-mutate(df,df$FLOW_IN-df$FLOW_OUT_REL)
typeof(df)
df[1,3]
nrow(df)
length(df)
class(df)
df1<-data.frame(DateTime="2022-11-11 21:12:00",solangpc="NA",AVG_ROP_FT_HR="16.77139",
                BIT_DEPTH="8757.416",
                BLOCK_POS="8.405858",
                FLOW_IN= "907.9405",
                FLOW_OUT_REL="8.254009",
                GAINLOSS= "-31.96413",
                HOOKLOAD_MAX="207.5564",
                STP_PRS_1= "3115.166",
                TD_SPEED="161.3170",
                TD_TORQUE="11333.791",
                TOT_DPT_MD="8757.416",
                WOB="14.9928001")
df2<-rbind(df,df1)
nrow(df2)
